(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{2256:function(e,t){e.exports='<table style="display: table; margin-bottom: 1.25rem"><thead><tr style="line-height: 1.5"><th style="width: 10%">Prop Name</th><th style="width: 25%">Type</th><th style="width: 10%">Is Required</th><th style="width: 10%">Default Value</th><th style="width: 45%">Description</th></tr></thead><tbody><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">allowClear</td><td style="padding-bottom: 1.8rem">bool</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">false</td><td style="padding-bottom: 1.8rem">Whether a clear option is available to clear the selection, will use placeholder text if provided.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">children</td><td style="padding-bottom: 1.8rem">node</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">The dropdown menu options.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">defaultValue</td><td style="padding-bottom: 1.8rem">union</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">The default selected value. Can be a string, number, or array of strings/numbers.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">disabled</td><td style="padding-bottom: 1.8rem">bool</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">false</td><td style="padding-bottom: 1.8rem">Whether the select is disabled.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">dropdownAttrs</td><td style="padding-bottom: 1.8rem">object</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">Additional attributes to spread onto the dropdown. ( Style, ClassNames, etc.. )</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">isInvalid</td><td style="padding-bottom: 1.8rem">bool</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">false</td><td style="padding-bottom: 1.8rem">Whether the select is in an invalid state.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">isTouchAccessible</td><td style="padding-bottom: 1.8rem">bool</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">false</td><td style="padding-bottom: 1.8rem">Ensure accessibility on touch devices. Will render the dropdown menu in\nnormal DOM flow with position absolute. By default, the menu renders in a\nportal, which is inaccessible on touch devices.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">maxHeight</td><td style="padding-bottom: 1.8rem">number</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">none</td><td style="padding-bottom: 1.8rem">The max height of the dropdown.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">noResultContent</td><td style="padding-bottom: 1.8rem">node</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">Content to display when no results are found.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">onBlur</td><td style="padding-bottom: 1.8rem">func</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">none</td><td style="padding-bottom: 1.8rem">Callback function triggered when the select loses focus. function(event)</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">onChange</td><td style="padding-bottom: 1.8rem">func</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">Callback function triggered when the value changes. function(value)</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">onClick</td><td style="padding-bottom: 1.8rem">func</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">none</td><td style="padding-bottom: 1.8rem">Callback function triggered when the select is clicked. function(event)</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">onDeselect</td><td style="padding-bottom: 1.8rem">func</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">Callback function triggered when an option is deselected. function(value)</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">onFocus</td><td style="padding-bottom: 1.8rem">func</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">none</td><td style="padding-bottom: 1.8rem">Callback function triggered when the select receives focus. function(event)</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">onSearch</td><td style="padding-bottom: 1.8rem">func</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">Callback function triggered when the search criteria changes. function(searchValue)</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">onSelect</td><td style="padding-bottom: 1.8rem">func</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">Callback function triggered when an option is selected. function(value)</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">optionFilter</td><td style="padding-bottom: 1.8rem">func</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">Callback function invoked for each option on search change. function(searchValue, option)</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">placeholder</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">Placeholder text.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">required</td><td style="padding-bottom: 1.8rem">bool</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">false</td><td style="padding-bottom: 1.8rem">Whether the field is required.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">value</td><td style="padding-bottom: 1.8rem">union</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">The selected value. Can be a string, number, or array of strings/numbers.</td></tr></tbody></table>'},2257:function(e,t,l){"use strict";l.r(t),t.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from 'react-intl';\nimport Frame from './search/Frame';\nimport Option from './shared/_Option';\nimport OptGroup from './shared/_OptGroup';\nimport SelectUtil from './shared/_SelectUtil';\n\nconst propTypes = {\n  /**\n   * Whether a clear option is available to clear the selection, will use placeholder text if provided.\n   */\n  allowClear: PropTypes.bool,\n  /**\n   * The dropdown menu options.\n   */\n  children: PropTypes.node,\n  /**\n   * The default selected value. Can be a string, number, or array of strings/numbers.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.array]),\n  /**\n   * Whether the select is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Additional attributes to spread onto the dropdown. ( Style, ClassNames, etc.. )\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  dropdownAttrs: PropTypes.object,\n  /**\n   * @private\n   * The intl object containing translations. This is retrieved from the context automatically by injectIntl.\n   */\n  intl: intlShape.isRequired,\n  /**\n   * Whether the select is in an invalid state.\n   */\n  isInvalid: PropTypes.bool,\n  /**\n   * Ensure accessibility on touch devices. Will render the dropdown menu in\n   * normal DOM flow with position absolute. By default, the menu renders in a\n   * portal, which is inaccessible on touch devices.\n   */\n  isTouchAccessible: PropTypes.bool,\n  /**\n   * The max height of the dropdown.\n   */\n  maxHeight: PropTypes.number,\n  /**\n   * Content to display when no results are found.\n   */\n  noResultContent: PropTypes.node,\n  /**\n   * Callback function triggered when the select loses focus. function(event)\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback function triggered when the value changes. function(value)\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback function triggered when the select is clicked. function(event)\n   */\n  onClick: PropTypes.func,\n  /**\n   * Callback function triggered when an option is deselected. function(value)\n   */\n  onDeselect: PropTypes.func,\n  /**\n   * Callback function triggered when the select receives focus. function(event)\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Callback function triggered when the search criteria changes. function(searchValue)\n   */\n  onSearch: PropTypes.func,\n  /**\n   * Callback function triggered when an option is selected. function(value)\n   */\n  onSelect: PropTypes.func,\n  /**\n   * Callback function invoked for each option on search change. function(searchValue, option)\n   */\n  optionFilter: PropTypes.func,\n  /**\n   * Placeholder text.\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether the field is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The selected value. Can be a string, number, or array of strings/numbers.\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.array]),\n};\n\nconst defaultProps = {\n  allowClear: false,\n  children: undefined,\n  defaultValue: undefined,\n  disabled: false,\n  dropdownAttrs: undefined,\n  isInvalid: false,\n  noResultContent: undefined,\n  onChange: undefined,\n  onDeselect: undefined,\n  onSearch: undefined,\n  onSelect: undefined,\n  optionFilter: undefined,\n  placeholder: undefined,\n  required: false,\n  isTouchAccessible: false,\n  value: undefined,\n};\n\nclass SearchSelect extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { defaultValue, value } = props;\n\n    this.state = {\n      value: SelectUtil.defaultValue({ defaultValue, value }),\n    };\n\n    this.display = this.display.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDeselect = this.handleDeselect.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  /**\n   * Returns the appropriate variant display\n   */\n  display() {\n    const selectValue = SelectUtil.value(this.props, this.state);\n\n    return SelectUtil.valueDisplay(this.props, selectValue);\n  }\n\n  /**\n   * Communicates changes to the value.\n   * @param {array|number|string} value - The value resulting from a change.\n   */\n  handleChange(value) {\n    if (this.props.value === undefined) {\n      this.setState({ value });\n    }\n\n    if (this.props.onChange) {\n      this.props.onChange(value);\n    }\n  }\n\n  /**\n   * Communicates the removal of a value from the selected options.\n   * @param {number|string} value - The value to be removed.\n   */\n  handleDeselect(value) {\n    this.handleChange(SelectUtil.deselect(this.props, this.state, value));\n\n    if (this.props.onDeselect) {\n      this.props.onDeselect(value);\n    }\n  }\n\n  /**\n   * Communicates the selection of a value.\n   * @param {number|string} value - The value of the selected option.\n   * @param {ReactNode} option - The selected option.\n   */\n  handleSelect(value, option) {\n    this.handleChange(SelectUtil.select(this.props, this.state, value));\n\n    if (this.props.onSelect) {\n      this.props.onSelect(value, option);\n    }\n  }\n\n  render() {\n    const {\n      allowClear, children, defaultValue, onChange, placeholder, required, value, intl, ...otherProps\n    } = this.props;\n\n    const defaultPlaceholder = intl.formatMessage({ id: 'Terra.form.select.defaultDisplay' });\n    const selectPlaceholder = placeholder === undefined ? defaultPlaceholder : placeholder;\n    let clearOptionDisplay;\n\n    if (allowClear) {\n      if (selectPlaceholder.length === 0) {\n        clearOptionDisplay = defaultPlaceholder;\n      } else {\n        clearOptionDisplay = selectPlaceholder;\n      }\n    }\n\n    return (\n      <Frame\n        {...otherProps}\n        data-terra-select\n        value={SelectUtil.value(this.props, this.state)}\n        display={this.display()}\n        onDeselect={this.handleDeselect}\n        onSelect={this.handleSelect}\n        placeholder={selectPlaceholder}\n        required={required}\n        totalOptions={SelectUtil.getTotalNumberOfOptions(children)}\n        clearOptionDisplay={clearOptionDisplay}\n      >\n        {children}\n      </Frame>\n    );\n  }\n}\n\nSearchSelect.Option = Option;\nSearchSelect.OptGroup = OptGroup;\nSearchSelect.propTypes = propTypes;\nSearchSelect.defaultProps = defaultProps;\nSearchSelect.isSelect = true;\n\nexport default injectIntl(SearchSelect);\n"},2258:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),a=r(l(268)),o=r(l(4)),d=r(l(806));function r(e){return e&&e.__esModule?e:{default:e}}var i=o.default.bind(d.default),s=function(){return n.default.createElement(a.default,{placeholder:"Select a color",allowClear:!0,className:i("form-select")},n.default.createElement(a.default.Option,{value:"blue",display:"Blue"}),n.default.createElement(a.default.Option,{value:"green",display:"Green"}),n.default.createElement(a.default.Option,{value:"purple",display:"Purple"}),n.default.createElement(a.default.Option,{value:"red",display:"Red"}),n.default.createElement(a.default.Option,{value:"violet",display:"Violet"}))};t.default=s},2259:function(e,t,l){"use strict";l.r(t),t.default='import React from \'react\';\nimport SearchSelect from \'terra-form-select/lib/SearchSelect\';\nimport classNames from \'classnames/bind\';\nimport styles from \'../FormSelectDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst AllowClearExample = () => (\n  <SearchSelect placeholder="Select a color" allowClear className={cx(\'form-select\')}>\n    <SearchSelect.Option value="blue" display="Blue" />\n    <SearchSelect.Option value="green" display="Green" />\n    <SearchSelect.Option value="purple" display="Purple" />\n    <SearchSelect.Option value="red" display="Red" />\n    <SearchSelect.Option value="violet" display="Violet" />\n  </SearchSelect>\n);\n\nexport default AllowClearExample;\n'},2260:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(e){if(e&&e.__esModule)return e;var t=i();if(t&&t.has(e))return t.get(e);var l={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var o=n?Object.getOwnPropertyDescriptor(e,a):null;o&&(o.get||o.set)?Object.defineProperty(l,a,o):l[a]=e[a]}}l.default=e,t&&t.set(e,l);return l}(l(0)),a=r(l(268)),o=r(l(4)),d=r(l(806));function r(e){return e&&e.__esModule?e:{default:e}}function i(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return i=function(){return e},e}function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var l=[],n=!0,a=!1,o=void 0;try{for(var d,r=e[Symbol.iterator]();!(n=(d=r.next()).done)&&(l.push(d.value),!t||l.length!==t);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==r.return||r.return()}finally{if(a)throw o}}return l}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var c=o.default.bind(d.default),u=function(){var e=s((0,n.useState)("blue"),2),t=e[0],l=e[1];return n.default.createElement(a.default,{placeholder:"Select a color",value:t,onChange:l,className:c("form-select")},n.default.createElement(a.default.Option,{value:"blue",display:"Blue"}),n.default.createElement(a.default.Option,{value:"green",display:"Green"}),n.default.createElement(a.default.Option,{value:"purple",display:"Purple"}),n.default.createElement(a.default.Option,{value:"red",display:"Red"}),n.default.createElement(a.default.Option,{value:"violet",display:"Violet"}))};t.default=u},2261:function(e,t,l){"use strict";l.r(t),t.default='import React, { useState } from \'react\';\nimport SearchSelect from \'terra-form-select/lib/SearchSelect\';\nimport classNames from \'classnames/bind\';\nimport styles from \'../FormSelectDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst ControlledExample = () => {\n  const [value, setValue] = useState(\'blue\');\n\n  return (\n    <SearchSelect placeholder="Select a color" value={value} onChange={setValue} className={cx(\'form-select\')}>\n      <SearchSelect.Option value="blue" display="Blue" />\n      <SearchSelect.Option value="green" display="Green" />\n      <SearchSelect.Option value="purple" display="Purple" />\n      <SearchSelect.Option value="red" display="Red" />\n      <SearchSelect.Option value="violet" display="Violet" />\n    </SearchSelect>\n  );\n};\n\nexport default ControlledExample;\n'},2262:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),a=r(l(268)),o=r(l(4)),d=r(l(806));function r(e){return e&&e.__esModule?e:{default:e}}var i=o.default.bind(d.default),s=function(){return n.default.createElement(a.default,{placeholder:"Select a color",className:i("form-select")},n.default.createElement(a.default.Option,{value:"blue",display:"Blue"}),n.default.createElement(a.default.Option,{value:"green",display:"Green"}),n.default.createElement(a.default.Option,{value:"purple",display:"Purple"}),n.default.createElement(a.default.Option,{value:"red",display:"Red"}),n.default.createElement(a.default.Option,{value:"violet",display:"Violet"}))};t.default=s},2263:function(e,t,l){"use strict";l.r(t),t.default='import React from \'react\';\nimport SearchSelect from \'terra-form-select/lib/SearchSelect\';\nimport classNames from \'classnames/bind\';\nimport styles from \'../FormSelectDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst SearchSelectExample = () => (\n  <SearchSelect placeholder="Select a color" className={cx(\'form-select\')}>\n    <SearchSelect.Option value="blue" display="Blue" />\n    <SearchSelect.Option value="green" display="Green" />\n    <SearchSelect.Option value="purple" display="Purple" />\n    <SearchSelect.Option value="red" display="Red" />\n    <SearchSelect.Option value="violet" display="Violet" />\n  </SearchSelect>\n);\n\nexport default SearchSelectExample;\n'},2264:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),a=r(l(268)),o=r(l(4)),d=r(l(806));function r(e){return e&&e.__esModule?e:{default:e}}var i=o.default.bind(d.default),s=function(){return n.default.createElement(a.default,{placeholder:"Select a color",disabled:!0,className:i("form-select"),defaultValue:"blue"},n.default.createElement(a.default.Option,{value:"blue",display:"Blue"}),n.default.createElement(a.default.Option,{value:"green",display:"Green"}),n.default.createElement(a.default.Option,{value:"purple",display:"Purple"}),n.default.createElement(a.default.Option,{value:"red",display:"Red"}),n.default.createElement(a.default.Option,{value:"violet",display:"Violet"}))};t.default=s},2265:function(e,t,l){"use strict";l.r(t),t.default='import React from \'react\';\nimport SearchSelect from \'terra-form-select/lib/SearchSelect\';\nimport classNames from \'classnames/bind\';\nimport styles from \'../FormSelectDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst DisabledExample = () => (\n  <SearchSelect placeholder="Select a color" disabled className={cx(\'form-select\')} defaultValue="blue">\n    <SearchSelect.Option value="blue" display="Blue" />\n    <SearchSelect.Option value="green" display="Green" />\n    <SearchSelect.Option value="purple" display="Purple" />\n    <SearchSelect.Option value="red" display="Red" />\n    <SearchSelect.Option value="violet" display="Violet" />\n  </SearchSelect>\n);\n\nexport default DisabledExample;\n'},2266:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),a=r(l(268)),o=r(l(4)),d=r(l(806));function r(e){return e&&e.__esModule?e:{default:e}}var i=o.default.bind(d.default),s=function(){return n.default.createElement(a.default,{placeholder:"Select a color",className:i("form-select"),isTouchAccessible:!0},n.default.createElement(a.default.Option,{value:"blue",display:"Blue"}),n.default.createElement(a.default.Option,{value:"green",display:"Green"}),n.default.createElement(a.default.Option,{value:"purple",display:"Purple"}),n.default.createElement(a.default.Option,{value:"red",display:"Red"}),n.default.createElement(a.default.Option,{value:"violet",display:"Violet"}))};t.default=s},2267:function(e,t,l){"use strict";l.r(t),t.default='import React from \'react\';\nimport SearchSelect from \'terra-form-select/lib/SearchSelect\';\nimport classNames from \'classnames/bind\';\nimport styles from \'../FormSelectDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst IsTouchAccessibleExample = () => (\n  <SearchSelect placeholder="Select a color" className={cx(\'form-select\')} isTouchAccessible>\n    <SearchSelect.Option value="blue" display="Blue" />\n    <SearchSelect.Option value="green" display="Green" />\n    <SearchSelect.Option value="purple" display="Purple" />\n    <SearchSelect.Option value="red" display="Red" />\n    <SearchSelect.Option value="violet" display="Violet" />\n  </SearchSelect>\n);\n\nexport default IsTouchAccessibleExample;\n'},2268:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),a=r(l(268)),o=r(l(4)),d=r(l(806));function r(e){return e&&e.__esModule?e:{default:e}}var i=o.default.bind(d.default),s=function(){return n.default.createElement(a.default,{placeholder:"Select a color",isInvalid:!0,className:i("form-select")},n.default.createElement(a.default.Option,{value:"blue",display:"Blue"}),n.default.createElement(a.default.Option,{value:"green",display:"Green"}),n.default.createElement(a.default.Option,{value:"purple",display:"Purple"}),n.default.createElement(a.default.Option,{value:"red",display:"Red"}),n.default.createElement(a.default.Option,{value:"violet",display:"Violet"}))};t.default=s},2269:function(e,t,l){"use strict";l.r(t),t.default='import React from \'react\';\nimport SearchSelect from \'terra-form-select/lib/SearchSelect\';\nimport classNames from \'classnames/bind\';\nimport styles from \'../FormSelectDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst InvalidExample = () => (\n  <SearchSelect placeholder="Select a color" isInvalid className={cx(\'form-select\')}>\n    <SearchSelect.Option value="blue" display="Blue" />\n    <SearchSelect.Option value="green" display="Green" />\n    <SearchSelect.Option value="purple" display="Purple" />\n    <SearchSelect.Option value="red" display="Red" />\n    <SearchSelect.Option value="violet" display="Violet" />\n  </SearchSelect>\n);\n\nexport default InvalidExample;\n'},2270:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),a=r(l(268)),o=r(l(4)),d=r(l(806));function r(e){return e&&e.__esModule?e:{default:e}}var i=o.default.bind(d.default),s=function(){return n.default.createElement(a.default,{placeholder:"Select a color",maxHeight:150,className:i("form-select")},n.default.createElement(a.default.Option,{value:"black",display:"Black"}),n.default.createElement(a.default.Option,{value:"blue",display:"Blue"}),n.default.createElement(a.default.Option,{value:"brown",display:"Brown"}),n.default.createElement(a.default.Option,{value:"green",display:"Green"}),n.default.createElement(a.default.Option,{value:"purple",display:"Purple"}),n.default.createElement(a.default.Option,{value:"red",display:"Red"}),n.default.createElement(a.default.Option,{value:"violet",display:"Violet"}),n.default.createElement(a.default.Option,{value:"white",display:"White"}),n.default.createElement(a.default.Option,{value:"yellow",display:"Yellow"}))};t.default=s},2271:function(e,t,l){"use strict";l.r(t),t.default='import React from \'react\';\nimport SearchSelect from \'terra-form-select/lib/SearchSelect\';\nimport classNames from \'classnames/bind\';\nimport styles from \'../FormSelectDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst MaxHeightExample = () => (\n  <SearchSelect placeholder="Select a color" maxHeight={150} className={cx(\'form-select\')}>\n    <SearchSelect.Option value="black" display="Black" />\n    <SearchSelect.Option value="blue" display="Blue" />\n    <SearchSelect.Option value="brown" display="Brown" />\n    <SearchSelect.Option value="green" display="Green" />\n    <SearchSelect.Option value="purple" display="Purple" />\n    <SearchSelect.Option value="red" display="Red" />\n    <SearchSelect.Option value="violet" display="Violet" />\n    <SearchSelect.Option value="white" display="White" />\n    <SearchSelect.Option value="yellow" display="Yellow" />\n  </SearchSelect>\n);\n\nexport default MaxHeightExample;\n'},2272:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(l(0)),a=r(l(268)),o=r(l(4)),d=r(l(806));function r(e){return e&&e.__esModule?e:{default:e}}var i=o.default.bind(d.default),s=function(){return n.default.createElement(a.default,{placeholder:"Select a color",className:i("form-select")},n.default.createElement(a.default.OptGroup,{label:"Shade of blue"},n.default.createElement(a.default.Option,{value:"blue",display:"Blue"}),n.default.createElement(a.default.Option,{value:"cyan",display:"Cyan"}),n.default.createElement(a.default.Option,{value:"teal",display:"Teal"}),n.default.createElement(a.default.Option,{value:"azul",display:"Azul"}),n.default.createElement(a.default.Option,{value:"aqua",display:"Aqua"})),n.default.createElement(a.default.OptGroup,{label:"Shades of green"},n.default.createElement(a.default.Option,{value:"green",display:"Green"}),n.default.createElement(a.default.Option,{value:"forest",display:"Forest Green"}),n.default.createElement(a.default.Option,{value:"dark",display:"Dark Green"}),n.default.createElement(a.default.Option,{value:"neon",display:"Neon Green"})))};t.default=s},2273:function(e,t,l){"use strict";l.r(t),t.default='import React from \'react\';\nimport SearchSelect from \'terra-form-select/lib/SearchSelect\';\nimport classNames from \'classnames/bind\';\nimport styles from \'../FormSelectDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst OptGroupExample = () => (\n  <SearchSelect placeholder="Select a color" className={cx(\'form-select\')}>\n    <SearchSelect.OptGroup label="Shade of blue">\n      <SearchSelect.Option value="blue" display="Blue" />\n      <SearchSelect.Option value="cyan" display="Cyan" />\n      <SearchSelect.Option value="teal" display="Teal" />\n      <SearchSelect.Option value="azul" display="Azul" />\n      <SearchSelect.Option value="aqua" display="Aqua" />\n    </SearchSelect.OptGroup>\n    <SearchSelect.OptGroup label="Shades of green">\n      <SearchSelect.Option value="green" display="Green" />\n      <SearchSelect.Option value="forest" display="Forest Green" />\n      <SearchSelect.Option value="dark" display="Dark Green" />\n      <SearchSelect.Option value="neon" display="Neon Green" />\n    </SearchSelect.OptGroup>\n  </SearchSelect>\n);\n\nexport default OptGroupExample;\n'},2940:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=_(l(0)),a=_(l(796)),o=_(l(947)),d=l(835),r=_(l(2256)),i=_(l(2257)),s=_(l(948)),c=_(l(949)),u=_(l(950)),p=_(l(951)),m=_(l(2258)),f=_(l(2259)),h=_(l(2260)),y=_(l(2261)),b=_(l(2262)),g=_(l(2263)),v=_(l(2264)),S=_(l(2265)),O=_(l(2266)),w=_(l(2267)),E=_(l(2268)),x=_(l(2269)),P=_(l(2270)),C=_(l(2271)),T=_(l(2272)),N=_(l(2273));function _(e){return e&&e.__esModule?e:{default:e}}var k=function(){return n.default.createElement(a.default,{packageName:d.name,packageVersion:d.version,readme:o.default,srcPath:"https://github.com/cerner/terra-core/tree/master/packages/terra-form-select",propsTables:[{componentName:"Search Select",componentSrc:i.default,componentProps:r.default},{componentName:"Option",componentSrc:c.default,componentProps:s.default},{componentName:"OptGroup",componentSrc:p.default,componentProps:u.default}],examples:[{title:"Search",description:"A Search Select allows selecting a single option.",example:n.default.createElement(b.default,null),source:g.default},{title:"Is Touch Accessible",description:"Ensure accessibility on touch devices. Will render the dropdown menu in normal DOM flow with position absolute. By default, the menu renders in a portal, which is inaccessible on touch devices.",example:n.default.createElement(O.default,null),source:w.default},{title:"Disabled",example:n.default.createElement(v.default,null),source:S.default},{title:"Invalid",description:"Applies theme-specific styling for invalid. Will also display error text when used with a Field.",example:n.default.createElement(E.default,null),source:x.default},{title:"Ability to add Option Groups",description:"An OptGroup provides a way to group options together within the listbox.",example:n.default.createElement(T.default,null),source:N.default},{title:"Ability to set a Maximum Height",description:"An example of implementing a custom max height of the Search.",example:n.default.createElement(P.default,null),source:C.default},{title:"Ability to Clear Selection",description:"An example with an option to clear the selected item.",example:n.default.createElement(m.default,null),source:f.default},{title:"Create a Controlled Search Select",description:"An example of implementing a controlled Search Select.",example:n.default.createElement(h.default,null),source:y.default}]})};t.default=k}}]);
//# sourceMappingURL=124-e19aa4235bc18e1afb72.js.map