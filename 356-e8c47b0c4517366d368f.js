(window.webpackJsonp=window.webpackJsonp||[]).push([[356],{2380:function(t,e,n){"use strict";n.r(e),e.default="# Terra Icon\n\nThe terra-icon component is used to visually represent a literal or symbolic object intended to initiate an action, communicate a status, or navigate the workflow.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-icon`\n  - `yarn add terra-icon`\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n## Peer Dependencies\n\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\n\n| Peer Dependency | Version |\n|-|-|\n| react | ^16.8.5 |\n| react-dom | ^16.8.5 |\n| react-intl | ^2.8.0 |\n\n\n\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n\n## Usage\nEach Icon can be imported individually.\n\n```jsx\nimport React from 'react';\nimport IconAdd from 'terra-icon/lib/icon/IconAdd';\nimport IconEdit from 'terra-icon/lib/icon/IconEdit';\n\n<div>\n  <IconAdd />\n  <IconEdit />\n</div>\n```\n\n## Component Features\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n"},2381:function(t,e){t.exports='<table style="display: table; margin-bottom: 1.25rem"><thead><tr style="line-height: 1.5"><th style="width: 10%">Prop Name</th><th style="width: 25%">Type</th><th style="width: 10%">Is Required</th><th style="width: 10%">Default Value</th><th style="width: 45%">Description</th></tr></thead><tbody><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">isBidi</td><td style="padding-bottom: 1.8rem">bool</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">false</td><td style="padding-bottom: 1.8rem">Should the svg mirror when dir=&quot;rtl&quot;.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">isSpin</td><td style="padding-bottom: 1.8rem">bool</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">false</td><td style="padding-bottom: 1.8rem">Should the SVG rotate.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">children</td><td style="padding-bottom: 1.8rem">node</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">null</td><td style="padding-bottom: 1.8rem">Child nodes.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">height</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">\'1em\'</td><td style="padding-bottom: 1.8rem">Height of SVG.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">width</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">\'1em\'</td><td style="padding-bottom: 1.8rem">Width of SVG.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">ariaLabel</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">null</td><td style="padding-bottom: 1.8rem">String that labels the current element. If &#39;aria-label&#39; is present,\nrole is set to &#39;img&#39; and aria-hidden is removed.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">focusable</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">\'false\'</td><td style="padding-bottom: 1.8rem">Focusable attribute. IE 10/11 are focusable without this attribute.</td></tr></tbody></table>'},2382:function(t,e,n){"use strict";n.r(e),e.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\n\n// eslint-disable-next-line import/no-unresolved, import/no-webpack-loader-syntax\nimport styles from './Icon.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * Should the svg mirror when dir=\"rtl\".\n   */\n  isBidi: PropTypes.bool,\n  /**\n   * Should the SVG rotate.\n   */\n  isSpin: PropTypes.bool,\n  /**\n   * Child nodes.\n   */\n  children: PropTypes.node,\n  /**\n   * Height of SVG.\n   */\n  height: PropTypes.string,\n  /**\n   * Width of SVG.\n   */\n  width: PropTypes.string,\n  /**\n   * String that labels the current element. If 'aria-label' is present,\n   * role is set to 'img' and aria-hidden is removed.\n   */\n  ariaLabel: PropTypes.string,\n  /**\n   * Focusable attribute. IE 10/11 are focusable without this attribute.\n   */\n  focusable: PropTypes.string,\n};\n\nconst defaultProps = {\n  isBidi: false,\n  isSpin: false,\n  children: null,\n  height: '1em',\n  width: '1em',\n  ariaLabel: null,\n  focusable: 'false',\n};\n\nconst IconBase = ({\n  isBidi,\n  isSpin,\n  children,\n  height,\n  width,\n  ariaLabel,\n  focusable,\n  ...customProps\n}) => {\n  const attributes = { ...customProps };\n\n  const addAnimationStyles = () => {\n    if (isSpin) {\n      const css = '@-webkit-keyframes tui-spin-ltr{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}@keyframes tui-spin-ltr{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}@-webkit-keyframes tui-spin-rtl{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(-359deg);transform:rotate(-359deg)}}@keyframes tui-spin-rtl{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}100%{-webkit-transform:rotate(-359deg);transform:rotate(-359deg)}}[dir=ltr] .tui-Icon.is-spin {-webkit-animation: tui-spin-ltr 2s infinite linear;animation: tui-spin-ltr 2s infinite linear;}[dir=rtl] .tui-Icon.is-spin {-webkit-animation: tui-spin-rtl 2s infinite linear;animation: tui-spin-rtl 2s infinite linear;}';\n      const head = document.head || document.getElementsByTagName('head')[0];\n      const style = document.createElement('style');\n      style.type = 'text/css';\n      style.id = 'terra-icon-animation';\n      // If we haven't written the styles to the DOM yet, add them, otherwise don't do this for subsequent spinner icons.\n      if (!document.getElementById(style.id)) {\n        style.appendChild(document.createTextNode(css));\n        head.appendChild(style);\n      }\n    }\n  };\n  addAnimationStyles();\n\n  // append to existing classNames\n  const classes = cx(\n    'tui-Icon',\n    'icon',\n    { 'is-bidi': isBidi },\n    { 'is-spin': isSpin },\n    attributes.className,\n  );\n\n  // aria-label is present, remove aria-hidden, set role to img\n  if (ariaLabel) {\n    attributes['aria-label'] = ariaLabel;\n    attributes.role = 'img';\n    attributes['aria-hidden'] = null;\n  } else {\n    attributes['aria-hidden'] = 'true';\n  }\n\n  attributes.height = height;\n  attributes.width = width;\n  attributes.focusable = focusable;\n\n  return <svg {...attributes} className={classes}>{children}</svg>;\n};\n\nIconBase.propTypes = propTypes;\nIconBase.defaultProps = defaultProps;\n\nexport default IconBase;\n"},2959:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=l(n(0)),i=l(n(796)),r=l(n(2380)),a=n(1070),s=l(n(2381)),d=l(n(2382));function l(t){return t&&t.__esModule?t:{default:t}}var m=function(){return o.default.createElement(i.default,{packageName:a.name,packageVersion:a.version,readme:r.default,srcPath:"https://github.com/cerner/terra-core/tree/master/packages/".concat(a.name),propsTables:[{componentName:"Icon",componentSrc:d.default,componentProps:s.default}]})};e.default=m}}]);
//# sourceMappingURL=356-e8c47b0c4517366d368f.js.map