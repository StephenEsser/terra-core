(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{2431:function(e,t,n){"use strict";n.r(t),t.default="# List Item\n\nThe list item provides a pattern for selection/selectability for li surrounded child content. Whenever, the list item has a prop `isSelectable=true` then `aria-label` must be provided to List for accessibility.  The onSelect event is the primary means for interaction, as it yields the associated metaData when valid selection occurs, though individual onClick and onKeyDown events can be applied through the use of customProps if greater granularity is required.\n\n## Usage\n\n```jsx\nimport React from 'react';\nimport List, { Item } from 'terra-list/lib/List';\n\n<Item\n  key={itemData.key}\n  isSelectable\n  isSelected={false}\n  metaData={{ key: 'my-item-key' }}\n  onSelect={this.handleItemSelection}\n>\n  <p>List item text</p>\n</Item>\n\n\n```\n"},2432:function(e,t){e.exports='<table style="display: table; margin-bottom: 1.25rem"><thead><tr style="line-height: 1.5"><th style="width: 10%">Prop Name</th><th style="width: 25%">Type</th><th style="width: 10%">Is Required</th><th style="width: 10%">Default Value</th><th style="width: 45%">Description</th></tr></thead><tbody><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">children</td><td style="padding-bottom: 1.8rem">node</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">[]</td><td style="padding-bottom: 1.8rem">The content element to be placed inside the list item for display.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">hasChevron</td><td style="padding-bottom: 1.8rem">bool</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">false</td><td style="padding-bottom: 1.8rem">Whether or not the list item has a disclosure indicator presented.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">isSelected</td><td style="padding-bottom: 1.8rem">bool</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">false</td><td style="padding-bottom: 1.8rem">Whether or not the list item should have selection styles applied.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">isSelectable</td><td style="padding-bottom: 1.8rem">bool</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">false</td><td style="padding-bottom: 1.8rem">Whether or not the list item should have styles to indicate the item is selectable.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">metaData</td><td style="padding-bottom: 1.8rem">object</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">none</td><td style="padding-bottom: 1.8rem">The associated metaData to be provided in the onSelect callback.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">onSelect</td><td style="padding-bottom: 1.8rem">func</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">none</td><td style="padding-bottom: 1.8rem">Function callback for when the appropriate click or key action is performed.\nCallback contains the javascript evnt and prop metadata, e.g. onSelect(event, metaData)</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">refCallback</td><td style="padding-bottom: 1.8rem">func</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">none</td><td style="padding-bottom: 1.8rem">Function callback for the ref of the li.</td></tr></tbody></table>'},2433:function(e,t,n){"use strict";n.r(t),t.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport ChevronRight from 'terra-icon/lib/icon/IconChevronRight';\nimport ListUtils from './ListUtils';\nimport styles from './List.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The content element to be placed inside the list item for display.\n   */\n  children: PropTypes.node,\n  /**\n   * Whether or not the list item has a disclosure indicator presented.\n   */\n  hasChevron: PropTypes.bool,\n  /**\n   * Whether or not the list item should have selection styles applied.\n   */\n  isSelected: PropTypes.bool,\n  /**\n   * Whether or not the list item should have styles to indicate the item is selectable.\n   */\n  isSelectable: PropTypes.bool,\n  /**\n   * The associated metaData to be provided in the onSelect callback.\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  metaData: PropTypes.object,\n  /**\n   * Function callback for when the appropriate click or key action is performed.\n   * Callback contains the javascript evnt and prop metadata, e.g. onSelect(event, metaData)\n   */\n  onSelect: PropTypes.func,\n  /**\n   * Function callback for the ref of the li.\n   */\n  refCallback: PropTypes.func,\n  /**\n   * @private Callback function not intended for use with this API, but if set pass it through to the element regardless.\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @private Callback function not intended for use with this API, but if set pass it through to the element regardless.\n   */\n  onClick: PropTypes.func,\n  /**\n   * @private Callback function not intended for use with this API, but if set pass it through to the element regardless.\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * @private Callback function not intended for use with this API, but if set pass it through to the element regardless.\n   */\n  onMouseDown: PropTypes.func,\n};\n\nconst defaultProps = {\n  children: [],\n  hasChevron: false,\n  isSelected: false,\n  isSelectable: false,\n};\n\nconst ListItem = ({\n  children,\n  hasChevron,\n  isSelected,\n  isSelectable,\n  metaData,\n  onBlur,\n  onClick,\n  onKeyDown,\n  onMouseDown,\n  onSelect,\n  refCallback,\n  ...customProps\n}) => {\n  const listItemClassNames = cx([\n    'list-item',\n    { selected: isSelected && isSelectable },\n    { 'is-selectable': isSelectable },\n    customProps.className,\n  ]);\n\n  const attrSpread = {};\n  if (isSelectable) {\n    attrSpread.onClick = ListUtils.wrappedOnClickForItem(onClick, onSelect, metaData);\n    attrSpread.onKeyDown = ListUtils.wrappedOnKeyDownForItem(onKeyDown, onSelect, metaData);\n    attrSpread.tabIndex = '0';\n    attrSpread.role = 'option';\n    attrSpread['aria-selected'] = isSelected;\n    attrSpread['data-item-show-focus'] = 'true';\n    attrSpread.onBlur = ListUtils.wrappedEventCallback(onBlur, event => event.currentTarget.setAttribute('data-item-show-focus', 'true'));\n    attrSpread.onMouseDown = ListUtils.wrappedEventCallback(onMouseDown, event => event.currentTarget.setAttribute('data-item-show-focus', 'false'));\n  }\n\n  return (\n    <li {...customProps} {...attrSpread} className={listItemClassNames} ref={refCallback}>\n      <div className={cx('item-fill')} key=\"item-fill\">{children}</div>\n      {hasChevron && <div className={cx('item-end')} key=\"item-end\">{<span className={cx('chevron')}><ChevronRight height=\"1em\" width=\"1em\" /></span>}</div>}\n    </li>\n  );\n};\n\nListItem.propTypes = propTypes;\nListItem.defaultProps = defaultProps;\n\nexport default ListItem;\n"},2434:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=d(n(0)),l=function(e){if(e&&e.__esModule)return e;var t=r();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if(Object.prototype.hasOwnProperty.call(e,l)){var o=a?Object.getOwnPropertyDescriptor(e,l):null;o&&(o.get||o.set)?Object.defineProperty(n,l,o):n[l]=e[l]}}n.default=e,t&&t.set(e,n);return n}(n(77)),o=d(n(817)),i=d(n(4)),s=d(n(874));function r(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return r=function(){return e},e}function d(e){return e&&e.__esModule?e:{default:e}}var c=i.default.bind(s.default),m=function(){return a.default.createElement(l.default,{role:"listbox","aria-label":"example-label"},a.default.createElement(l.Item,{key:"default"},a.default.createElement(o.default,{title:"Default ListItem",className:c("placeholder")})),a.default.createElement(l.Item,{key:"chevron",hasChevron:!0},a.default.createElement(o.default,{title:"Chevron ListItem",className:c("placeholder")})),a.default.createElement(l.Item,{key:"selectable",isSelectable:!0},a.default.createElement(o.default,{title:"Selectable ListItem",className:c("placeholder")})),a.default.createElement(l.Item,{key:"selected",isSelectable:!0,isSelected:!0},a.default.createElement(o.default,{title:"Selected ListItem",className:c("placeholder")})))};t.default=m},2435:function(e,t,n){"use strict";n.r(t),t.default='import React from \'react\';\nimport List, { Item } from \'terra-list/lib/index\';\nimport Placeholder from \'terra-doc-template/lib/Placeholder\';\nimport classNames from \'classnames/bind\';\nimport styles from \'./ListDocCommon.module.scss\';\n\nconst cx = classNames.bind(styles);\n\nconst ListSectionExample = () => (\n  <List role="listbox" aria-label="example-label">\n    <Item\n      key="default"\n    >\n      <Placeholder title="Default ListItem" className={cx(\'placeholder\')} />\n    </Item>\n    <Item\n      key="chevron"\n      hasChevron\n    >\n      <Placeholder title="Chevron ListItem" className={cx(\'placeholder\')} />\n    </Item>\n    <Item\n      key="selectable"\n      isSelectable\n    >\n      <Placeholder title="Selectable ListItem" className={cx(\'placeholder\')} />\n    </Item>\n    <Item\n      key="selected"\n      isSelectable\n      isSelected\n    >\n      <Placeholder title="Selected ListItem" className={cx(\'placeholder\')} />\n    </Item>\n  </List>\n);\n\nexport default ListSectionExample;\n'},2966:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=m(n(0)),l=m(n(796)),o=m(n(2431)),i=n(867),s=m(n(2432)),r=m(n(2433)),d=m(n(2434)),c=m(n(2435));function m(e){return e&&e.__esModule?e:{default:e}}var p=function(){return a.default.createElement(l.default,{packageName:i.name,packageVersion:i.version,readme:o.default,srcPath:"https://github.com/cerner/terra-core/tree/master/packages/".concat(i.name),examples:[{example:a.default.createElement(d.default,null),source:c.default}],propsTables:[{componentName:"List Item",componentSrc:r.default,componentProps:s.default}]})};t.default=p}}]);
//# sourceMappingURL=266-70d4dbda30dd692f56cd.js.map