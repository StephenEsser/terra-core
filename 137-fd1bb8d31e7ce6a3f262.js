(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{1789:function(t,e,a){"use strict";a.r(e),e.default="# Facility\n\nThe `Facility` variant represents a location - it displays an image in a circular frame. If an image is not provided, a fallback facility icon displays.\n\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-avatar`\n\n## Usage\n\n```jsx\nimport React from 'react';\nimport { Facility } from 'terra-avatar';\n\n<Facility\n  alt=\"Lima\"\n  image=\"/path/to/image.jpg\"\n/>\n```\n\n## Component Features\n\n * [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n * [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n"},1790:function(t,e){t.exports='<table style="display: table; margin-bottom: 1.25rem"><thead><tr style="line-height: 1.5"><th style="width: 10%">Prop Name</th><th style="width: 25%">Type</th><th style="width: 10%">Is Required</th><th style="width: 10%">Default Value</th><th style="width: 45%">Description</th></tr></thead><tbody><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">alt</td><td style="padding-bottom: 1.8rem">string</td><td style="color: #d53700; padding-bottom: 1.8rem">required</td><td style="font-weight: bold; padding-bottom: 1.8rem">none</td><td style="padding-bottom: 1.8rem">Specifies the alternative text for the image.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">color</td><td style="padding-bottom: 1.8rem">enum</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">\'auto\'</td><td style="padding-bottom: 1.8rem">Sets the background color. Defaults to <code style="white-space: pre-wrap">auto</code>. Accepted color variants are theme specific.\nOne of: <code>&#39;auto&#39;</code>, <code>&#39;neutral&#39;</code>, <code>&#39;one&#39;</code>, <code>&#39;two&#39;</code>, <code>&#39;three&#39;</code>, <code>&#39;four&#39;</code>, <code>&#39;five&#39;</code>, <code>&#39;six&#39;</code>, <code>&#39;seven&#39;</code>, <code>&#39;eight&#39;</code>, <code>&#39;nine&#39;</code>, <code>&#39;ten&#39;</code>.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">hashValue</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">Value used for the hash function when color is set to <code style="white-space: pre-wrap">auto</code>. If not provided, hash function utilizes alt.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">image</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">The image to display.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">isAriaHidden</td><td style="padding-bottom: 1.8rem">bool</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">false</td><td style="padding-bottom: 1.8rem">Whether to hide avatar from the accessibility tree.</td></tr><tr style="vertical-align: top"><td style="font-weight: bold; padding-bottom: 1.8rem">size</td><td style="padding-bottom: 1.8rem">string</td><td style="padding-bottom: 1.8rem">optional</td><td style="font-weight: bold; padding-bottom: 1.8rem">undefined</td><td style="padding-bottom: 1.8rem">Overrides the default size.</td></tr></tbody></table>'},1791:function(t,e,a){"use strict";a.r(e),e.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport styles from '../common/Avatar.module.scss';\nimport {\n  AVATAR_VARIANTS, generateImagePlaceholder, generateImage, setColor,\n} from '../common/AvatarUtils';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * Specifies the alternative text for the image.\n   */\n  alt: PropTypes.string.isRequired,\n  /**\n   * Sets the background color. Defaults to `auto`. Accepted color variants are theme specific.\n   * One of: `'auto'`, `'neutral'`, `'one'`, `'two'`, `'three'`, `'four'`, `'five'`, `'six'`, `'seven'`, `'eight'`, `'nine'`, `'ten'`.\n   */\n  color: PropTypes.oneOf(['auto', 'neutral', 'one', 'two', 'three', 'four',\n    'five', 'six', 'seven', 'eight', 'nine', 'ten']),\n  /**\n   * Value used for the hash function when color is set to `auto`. If not provided, hash function utilizes alt.\n   */\n  hashValue: PropTypes.string,\n  /**\n   * The image to display.\n   */\n  image: PropTypes.string,\n  /**\n   * Whether to hide avatar from the accessibility tree.\n   */\n  isAriaHidden: PropTypes.bool,\n  /**\n   * Overrides the default size.\n   */\n  size: PropTypes.string,\n};\n\nconst defaultProps = {\n  color: 'auto',\n  hashValue: undefined,\n  image: undefined,\n  isAriaHidden: false,\n  size: undefined,\n};\n\nclass Facility extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fallback: false,\n    };\n\n    this.handleFallback = this.handleFallback.bind(this);\n  }\n\n  handleFallback() {\n    this.setState({ fallback: true });\n  }\n\n  render() {\n    const {\n      alt,\n      color,\n      hashValue,\n      image,\n      isAriaHidden,\n      size,\n      ...customProps\n    } = this.props;\n\n    let facilityContent;\n\n    if (image) {\n      facilityContent = generateImage(image, alt, isAriaHidden, AVATAR_VARIANTS.FACILITY, this.handleFallback);\n    } else {\n      facilityContent = generateImagePlaceholder(alt, isAriaHidden, AVATAR_VARIANTS.FACILITY);\n    }\n    const attributes = { ...customProps };\n    const customStyles = size ? ({ fontSize: size, ...attributes.style }) : attributes.style;\n    const facilityClassNames = cx([\n      'avatar',\n      setColor(alt, color, hashValue),\n      { 'fallback-icon': this.state.fallback },\n      { image: Boolean(image) },\n      attributes.className,\n    ]);\n\n    /* eslint-disable react/forbid-dom-props */\n    return (\n      <div {...attributes} className={facilityClassNames} style={customStyles}>\n        {facilityContent}\n      </div>\n    );\n    /* eslint-enable react/forbid-dom-props */\n  }\n}\n\nFacility.propTypes = propTypes;\nFacility.defaultProps = defaultProps;\n\nexport default Facility;\n"},1792:function(t,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,o=(n=a(0))&&n.__esModule?n:{default:n},r=a(126);var i=function(){return o.default.createElement(r.Facility,{alt:"South Surgical Center"})};e.default=i},1793:function(t,e,a){"use strict";a.r(e),e.default="import React from 'react';\nimport { Facility } from 'terra-avatar';\n\nconst AvatarFacility = () => (\n  <Facility alt=\"South Surgical Center\" />\n);\n\nexport default AvatarFacility;\n"},1794:function(t,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=i(a(0)),o=a(126),r=i(a(944));function i(t){return t&&t.__esModule?t:{default:t}}var l=function(){return n.default.createElement(o.Facility,{image:r.default,alt:"Thailand"})};e.default=l},1795:function(t,e,a){"use strict";a.r(e),e.default="import React from 'react';\nimport { Facility } from 'terra-avatar';\nimport image from '../../../assets/200x133.jpg';\n\nconst FacilityImage = () => (\n  <Facility image={image} alt=\"Thailand\" />\n);\n\nexport default FacilityImage;\n"},1796:function(t,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=i(a(0)),o=a(126),r=i(a(944));function i(t){return t&&t.__esModule?t:{default:t}}var l=function(){return n.default.createElement(o.Facility,{image:r.default,alt:"Thailand",size:"2em"})};e.default=l},1797:function(t,e,a){"use strict";a.r(e),e.default="import React from 'react';\nimport { Facility } from 'terra-avatar';\nimport image from '../../../assets/200x133.jpg';\n\nconst AvatarSize = () => (\n  <Facility image={image} alt=\"Thailand\" size=\"2em\" />\n);\n\nexport default AvatarSize;\n"},1798:function(t,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(a(0)),o=l(a(3)),r=a(126),i=l(a(1056));function l(t){return t&&t.__esModule?t:{default:t}}function d(){return(d=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(t[n]=a[n])}return t}).apply(this,arguments)}var s={color:o.default.string},c=function(t){var e=d({},t);return n.default.createElement(r.Facility,{alt:"Lima",color:e.color})};c.propTypes=s;var p=(0,i.default)(c);e.default=p},1799:function(t,e,a){"use strict";a.r(e),e.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Facility } from 'terra-avatar';\nimport ColorVariantsWrapper from 'terra-avatar/lib/terra-dev-site/doc/example/common/ColorVariantsWrapper';\n\nconst propTypes = { color: PropTypes.string };\n\nconst FacilityColorVariants = ({\n  ...props\n}) => (\n  <Facility alt=\"Lima\" color={props.color} />\n);\n\nFacilityColorVariants.propTypes = propTypes;\nexport default ColorVariantsWrapper(FacilityColorVariants);\n"},2874:function(t,e,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=h(a(0)),o=h(a(796)),r=h(a(1789)),i=a(917),l=h(a(1790)),d=h(a(1791)),s=h(a(1792)),c=h(a(1793)),p=h(a(1794)),u=h(a(1795)),m=h(a(1796)),f=h(a(1797)),y=h(a(1798)),g=h(a(1799));function h(t){return t&&t.__esModule?t:{default:t}}var b=function(){return n.default.createElement(o.default,{packageName:i.name,packageVersion:i.version,readme:r.default,srcPath:"https://github.com/cerner/terra-core/tree/master/packages/".concat(i.name),examples:[{title:"Default - Fallback Icon",example:n.default.createElement(s.default,null),source:c.default},{title:"Image",example:n.default.createElement(p.default,null),source:u.default},{title:"Override Size",example:n.default.createElement(m.default,null),source:f.default},{title:"Toggle Color Variants - Theme Specific",example:n.default.createElement(y.default,null),source:g.default}],propsTables:[{componentName:"Facility",componentSrc:d.default,componentProps:l.default}]})};e.default=b},944:function(t,e,a){t.exports=a.p+"73327ca7b2736941c476fded0d51013f.jpg"}}]);
//# sourceMappingURL=137-fd1bb8d31e7ce6a3f262.js.map